<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机方向及导师选择有感</title>
      <link href="/2020/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%96%B9%E5%90%91%E5%8F%8A%E5%AF%BC%E5%B8%88%E9%80%89%E6%8B%A9%E6%9C%89%E6%84%9F/"/>
      <url>/2020/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%96%B9%E5%90%91%E5%8F%8A%E5%AF%BC%E5%B8%88%E9%80%89%E6%8B%A9%E6%9C%89%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p>​    正常的话，初试成绩出来后就要联系并确定导师，拟录取后得到导师指点，适应研究生生活；但由于一些阻碍（前几个老师名额都满了，后两个老师的名额没确定下来，暂时无法答复我），导师和方向的问题迟迟没有解决，也是我一直打着等老师回复的幌子拖着这个事。</p><p>​    索性今天就把方向给定了，根据方向去联系导师，本来导师又多，我也不认识，学长学姐也没有参考性的建议，只能排除一些雷硬冲了；</p><p>​    就我而言，喜欢一些有挑战的东西，但常常因为不够自信而不去尝试，这次就冲一把；搜了一些资料，也看了一些论坛帖子，对以下几个方向有了一些理解：</p><p>​    <strong>人工智能/机器学习/深度学习</strong>：存在着分支关系的这三个方向，需要很好的数学功底，算法功底；读研期间处理模型的时候，需要往复的调参数，越熟练调得越快；而数学到了一定的高度后，就是靠天赋了；所以，这是一个极具有挑战的方向；</p><p>毕业后，工作一般是算法岗位、算法工程师，薪资待遇好；纯算法方向（对模型创新）比较吃学历、吃赛奖、吃顶会，工程方向（将现有模型编程落地项目）的话门槛要求相对低点；</p><p>其中的自然语言处理(<strong>NLP</strong>)和计算机视觉(<strong>CV</strong>)属于比较火热的方向，但CV由于人数多、落地少，NLP相对来说比较受青睐，但目前基本就大厂设了，进大厂难，小厂如果有的话，则进去相对容易一些，在以后的话应该有一个好的发展；</p><p>在我看来，<strong>智能推荐</strong>的领域应该比NLP的宽，并且感觉覆盖面更广一些，不知道就业形势会不会好点；</p><p>​    <strong>大数据</strong>：大数据的方向大体有开发和分析两种，主要以java为主吧，python也有；大数据薪资也算可以，就业不错，应该算是主流方向吧；</p><p>​    <strong>开发岗位</strong>：这个不算是研究方向，但是就业的一个很好的指南针；学好Java，步入开发岗位，岗位多，薪资过得去，避坑机器学习，也是大多数程序员的选择吧；</p><p>所以，读研期间就以<strong>优先NLP/推荐系统，然后机器学习/深度学习，其次大数据相关方向</strong>吧，毕竟很多东西都没真正接触过，也不知道自己真正喜欢什么，想要什么；课后就自己学学java开发，凡事留条后路；</p><p>最近国家还投了2000亿在电子产业上，估计通信电子行业在几年内会持续上升吧；</p>]]></content>
      
      
      <categories>
          
          <category> Privacy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++面试题</title>
      <link href="/2020/06/29/C++%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/06/29/C++%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="1-C-和C的区别"><a href="#1-C-和C的区别" class="headerlink" title="1. C++和C的区别"></a>1. C++和C的区别</h1><p>1）在设计思想上：</p><p>C++是<strong>面向对象</strong>的语言，而C是面向过程的<strong>结构化编程</strong>语言；</p><p>2）在内容方面：</p><p>C++是C的超集，即C是C++的子集，C++兼容C；</p><p>C++引入类、封装、隐藏、继承、多态等特性；引入STL标准模板库等；</p><p>C++提供<strong>引用&amp;</strong>机制，降低使用指针的复杂度；</p><p>C++提供内联函数inline；</p><p>3）在语法方面：</p><p>C++中new和delete是对内存分配的运算符，取代了c的malloc和free；</p><p>C++中用控制标准输入输出的iostream类库代替了标准C中的stdio函数库；</p><p>C++中的try/catch/throw异常处理机制取代了C中的setjmp()和longjmp()；</p><p>强制类型转换，C++提供两种两种格式，而C只有第一种；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> el = <span class="number">123.233</span>;</span><br><span class="line"><span class="keyword">int</span> i = (<span class="keyword">int</span>) el; <span class="comment">//第一种 </span></span><br><span class="line"><span class="keyword">int</span> j = <span class="keyword">int</span> (el);<span class="comment">//第二种</span></span><br></pre></td></tr></table></figure><p>C++允许设置函数默认参数，而C不允许；</p><p>C++允许对函数进行重载(两个同名函数，若它们参数类型不一致or参数个数不同，则为两个不同的函数)，而C不允许；</p><p>C++允许在程序任何地方定义变量，而C只允许在函数开头部分定义；</p><p>详解可参考文章：<a href="https://blog.csdn.net/cherrydreamsover/article/details/81835976?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.nonecase" target="_blank" rel="noopener">C++和C的区别</a></p><h1 id="2-static的作用"><a href="#2-static的作用" class="headerlink" title="2. static的作用"></a>2. static的作用</h1><p>1、全局静态变量</p><p>存放于静态存储区；</p><p>在整个程序运行期间都存在；</p><p>未被初始化时自动初始化为0；</p><p>作用域：从定义之处开始到文件结尾；</p><p>2、局部静态变量</p><p>仅作用域与全局静态变量不同：局部静态变量在定义它的函数or语句块结束时，作用域便结束，此时不可访问，当再次调用函数时，即可访问且值不变；</p><p>3、静态函数</p><p>函数默认extern，即可以被其他文件可用；</p><p>而静态函数只能在声明它的文件中可见，不能被其他文件所引用；</p><p>4、类的静态成员变量</p><p>类的静态成员可实现多个对象之间的数据共享，只存储于溢出，共该类的所有对象共用；</p><p>5、类的静态成员函数</p><p>调用静态成员函数不需要用对象名（但可以用），且静态成员函数中不能直接引用类中的非静态成员，因为它不知道这个成员为那个对象所有；</p><p>调用静态成员函数使用如下格式：<code>&lt;类名&gt;::&lt;静态成员函数名&gt;(&lt;参数表&gt;);</code></p><h1 id="3-C-中的四种cast转换"><a href="#3-C-中的四种cast转换" class="headerlink" title="3. C++中的四种cast转换"></a>3. C++中的四种cast转换</h1><p>C++中四种类型转换是：static_cast, dynamic_cast, const_cast, reinterpret_cast；</p><p>1、const_cast</p><p>用于将const变量转为非const；</p><p>2、static_cast</p><p>用于各种隐式转换，比如非const转const，void*转指针等, static_cast能用于多态向上转化，如果向下转能成功但是不安全，结果未知；</p><p>3、dynamic_cast</p><p>用于动态类型转换。只能用于含有虚函数的类，用于类层次间的向上和向下转化。只能转指针或引用。向下转化时，如果是非法的对于指针返回NULL，对于引用抛异常。</p><p>向上转换：指的是子类向基类的转换；</p><p>向下转换：指的是基类向子类的转换；</p><p>它通过判断在执行到该语句的时候变量的运行时类型和要转换的类型是否相同来判断是否能够进行向下转换；</p><p>4、reinterpret_cast</p><p>几乎什么都可以转，比如将int转指针，可能会出问题，尽量少用；</p><h1 id="4-C-C中指针和引用的区别"><a href="#4-C-C中指针和引用的区别" class="headerlink" title="4. C++/C中指针和引用的区别"></a>4. C++/C中指针和引用的区别</h1><p>1、指针有自己的一块空间，而引用只是别名；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">short a=<span class="number">1</span>;</span><br><span class="line">short *p=&amp;a;</span><br><span class="line">short &amp;b=a;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span>(p);<span class="comment">//输出4</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span>(b);<span class="comment">//输出2</span></span><br></pre></td></tr></table></figure><p>2、指针可被初始化为NULL，而引用必须被初始化且必须是一个已有对象的引用；</p><p>3、可以有const指针，但是没有const引用；</p><p>4、指针可以在使用中指向其他对象，而引用一旦初始化，便不能再指向别的对象；</p><p>5、指针可以有多级(**p)，而引用只有一级；</p><p>6、指针和引用使用++运算符的意义不同；如若变量i是int类型，p指向i，b是i的引用；那么++p表示p的值等于 i 的地址加四个地址单位后的地址；而++b的值是i+1；</p><p>7、如果返回动态内存分配的对象或者内存，必须使用指针，引用可能引起内存泄露；</p><h1 id="5-什么是野指针"><a href="#5-什么是野指针" class="headerlink" title="5. 什么是野指针"></a>5. 什么是野指针</h1><p>野指针就是指向一个已删除的对象或者未申请访问受限内存区域的指针；</p><h1 id="6-为什么对于会被继承的类，其析构函数必须是虚函数？"><a href="#6-为什么对于会被继承的类，其析构函数必须是虚函数？" class="headerlink" title="6. 为什么对于会被继承的类，其析构函数必须是虚函数？"></a>6. 为什么对于会被继承的类，其析构函数必须是虚函数？</h1><p>将可能会被继承的父类的析构函数设置为虚函数，可以保证当我们new一个子类，然后使用基类指针指向该子类对象，释放该子类对象的空间时，可以释放掉子类的空间，防止内存泄漏。</p><p>C++默认的析构函数不是虚函数是因为虚函数需要额外的虚函数表和虚表指针，占用额外的内存。而对于不会被继承的类来说，其析构函数如果是虚函数，就会浪费内存。因此C++默认的析构函数不是虚函数，而是只有当需要当作父类时，设置为虚函数。</p><p>详解可参考：<a href="https://blog.csdn.net/qq_42717239/article/details/102806722?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.nonecase" target="_blank" rel="noopener">继承-虚析构函数</a></p><h1 id="7-函数指针"><a href="#7-函数指针" class="headerlink" title="7. 函数指针"></a>7. 函数指针</h1><p>1、定义</p><p>函数指针是指向函数的指针变量；</p><p>函数指针本身首先是一个指针变量，该指针变量指向一个具体的函数。这正如用指针变量可指向整型变量、字符型、数组一样，这里是指向函数；</p><p>C在编译时，每一个函数都有一个入口地址，该入口地址就是函数指针所指向的地址；有了指向函数的指针变量后，可用该指针变量调用函数，就如同用指针变量可引用其他类型变量一样，在这些概念上是大体一致的；</p><p>2、用途：</p><p>调用函数和做函数的参数，比如回调函数。</p><p>3、示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> c)</span> <span class="comment">//函数fun</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> (*pf)(<span class="keyword">char</span> c); <span class="comment">//定义函数指针pf</span></span><br><span class="line">    pf=fun;  <span class="comment">//将函数指针pf指向函数fun</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;pf(<span class="string">'a'</span>);  <span class="comment">//输出97</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-C-中析构函数的作用"><a href="#8-C-中析构函数的作用" class="headerlink" title="8. C++中析构函数的作用"></a>8. C++中析构函数的作用</h1><p>析构函数与构造函数对应，当对象结束其生命周期，如对象所在的函数已调用完毕时，系统会自动执行析构函数。</p><p>析构函数名也应与类名相同，只是在函数名前面加一个位取反符<del>，例如</del>stud( )，以区别于构造函数。它不能带任何参数，也没有返回值（包括void类型）。只能有一个析构函数，不能重载；</p><p>如果用户没有编写析构函数，编译系统会自动生成一个缺省的析构函数（即使自定义了析构函数，编译器也总是会为我们合成一个析构函数，并且如果自定义了析构函数，编译器在执行时会先调用自定义的析构函数再调用合成的析构函数），它也不进行任何操作。所以许多简单的类中没有用显式的析构函数；</p><p>如果一个类中有指针，且在使用的过程中动态的申请了内存，那么最好显示构造析构函数在销毁类之前，释放掉申请的内存空间，避免内存泄漏；</p><p>类析构顺序：1）派生类本身的析构函数；2）对象成员析构函数；3）基类析构函数。</p><h1 id="9-静态函数和虚函数的区别"><a href="#9-静态函数和虚函数的区别" class="headerlink" title="9. 静态函数和虚函数的区别"></a>9. 静态函数和虚函数的区别</h1><p>静态函数在编译的时候就已经确定运行时机，虚函数在运行的时候动态绑定。虚函数因为用了虚函数表机制，调用的时候会增加一次内存开销；</p><h1 id="10-重载和覆盖"><a href="#10-重载和覆盖" class="headerlink" title="10. 重载和覆盖"></a>10. 重载和覆盖</h1><p><strong>重载</strong>：两个函数名相同，但是参数列表不同（个数，类型），返回值类型没有要求，在同一作用域中；</p><p><strong>重写/覆盖</strong>：子类继承了父类，父类中的函数是虚函数，在子类中重新定义了这个虚函数，这种情况是重写;</p><h1 id="11-对虚函数和多态的理解"><a href="#11-对虚函数和多态的理解" class="headerlink" title="11. 对虚函数和多态的理解"></a>11. 对虚函数和多态的理解</h1><p>多态的实现主要分为静态多态和动态多态，静态多态主要是重载，在编译的时候就已经确定；动态多态是用虚函数机制实现的，在运行期间动态绑定。举个例子：一个父类类型的指针指向一个子类对象时候，使用父类的指针去调用子类中重写了的父类中的虚函数的时候，会调用子类重写过后的函数，在父类中声明为加了virtual关键字的函数，在子类中重写时候不需要加virtual也是虚函数。<br>虚函数的实现：在有虚函数的类中，类的最开始部分是一个虚函数表的指针，这个指针指向一个虚函数表，表中放了虚函数的地址，实际的虚函数在代码段(.text)中。当子类继承了父类的时候也会继承其虚函数表，当子类重写父类中虚函数时候，会将其继承到的虚函数表中的地址替换为重新写的函数地址。使用了虚函数，会增加访问内存开销，降低效率。</p><h1 id="12-写个函数在main函数执行前先运行"><a href="#12-写个函数在main函数执行前先运行" class="headerlink" title="12. 写个函数在main函数执行前先运行"></a>12. 写个函数在main函数执行前先运行</h1><p>C++ 的全局对象的构造函数会在 main 函数之前先运行；</p><p>其实在 c 语言里面很早就有了，在 gcc 中可以使用attribute关键字指定如下（在编译器编译的时候就绝决定了）</p><p>详解可参考文章：<a href="https://www.cnblogs.com/zpcoding/p/10805639.html" target="_blank" rel="noopener">如何再main()执行之前先运行其他函数</a></p><h1 id="13-const-char-arr-”123”-char-brr-”123”-char-crr-”123”-的区别"><a href="#13-const-char-arr-”123”-char-brr-”123”-char-crr-”123”-的区别" class="headerlink" title="13. const char *arr=”123”; char *brr=”123”;char  crr[]=”123”;的区别"></a>13. const char *arr=”123”; char *brr=”123”;char  crr[]=”123”;的区别</h1><p>首先， “123”永远都是保存在常量区，要么指针指向常量区”123”，要么数组复制“123”到栈区；</p><p>1）const char *arr=”123”;</p><p>“123”保存在常量区，const本来是修饰arr指向的值不能通过arr去修改，但是字符串“123”在常量区，本来就不能改变，所以加不加const效果都一样;</p><p>2） char *brr=”123”;</p><p>“123”保存在常量区,brr和arr指向的是同一个位置，同样不能通过brr去修改”123”的值</p><p>3）char crr[] = “123”;</p><p>这里“123”相当于一个字符数组，”123”从常量区复制到栈区，可以通过crr去修改；</p><h1 id="14-C语言是怎么进行函数调用的？"><a href="#14-C语言是怎么进行函数调用的？" class="headerlink" title="14. C语言是怎么进行函数调用的？"></a>14. C语言是怎么进行函数调用的？</h1><p>每一个函数调用都会分配函数栈，在栈内进行函数执行过程；</p><p>调用前，先把返回地址压栈，然后把当前函数的ebp指针压栈。然后ebp改为当前esp值，此时ebp=esp，表示初始的子函数帧栈大小为0，然后移动帧指针（修改ebp寄存器）与栈指针（修改esp寄存器），为swap函数创建一个栈帧结构；</p><p>详解可参考：<a href="https://blog.csdn.net/weixin_42462202/article/details/88317097" target="_blank" rel="noopener">C语言函数调用过程</a></p><h1 id="15-说一声fork-wait-exec函数"><a href="#15-说一声fork-wait-exec函数" class="headerlink" title="15. 说一声fork,wait,exec函数"></a>15. 说一声fork,wait,exec函数</h1><p>父进程产生子进程使用<strong>fork()</strong>拷贝出来一个父进程的副本，此时只拷贝了父进程的页表，两个进程都读同一块内存，当有进程写的时候使用写时拷贝机制(可参考：<a href="https://blog.csdn.net/wyll19980812/article/details/106007166" target="_blank" rel="noopener">操作系统面试题汇总</a>中的fork()与vfork())分配内存，<strong>exec()</strong>函数可以加载一个elf文件去替换父进程，从此父进程和子进程就可以运行不同的程序了。fork()给父进程返回子进程的PID，给子进程返回0；</p><p>调用了<strong>wait()</strong>的父进程将会发生阻塞，直到有子进程状态改变,执行成功返回0，错误返回-1；</p><p>exec()执行成功则子进程从新的程序开始运行，无返回值，执行失败返回-1；</p><h1 id="16-说一下C-中类成员的访问权限"><a href="#16-说一下C-中类成员的访问权限" class="headerlink" title="16. 说一下C++中类成员的访问权限"></a>16. 说一下C++中类成员的访问权限</h1><p>C++通过 public、protected、private 三个关键字来控制成员变量和成员函数的访问权限，它们分别表示公有的、受保护的、私有的，被称为成员访问限定符；</p><p>在类的内部（定义类的代码内部），无论成员被声明为 public、protected 还是 private，都是可以互相访问的，没有访问权限的限制；</p><p>在类的外部（定义类的代码之外），只能通过对象访问成员，并且通过对象只能访问 public 属性的成员，不能访问 private、protected 属性的成员；</p><h1 id="17-C-源文件从文本到可执行文件经历的过程"><a href="#17-C-源文件从文本到可执行文件经历的过程" class="headerlink" title="17. C++源文件从文本到可执行文件经历的过程"></a>17. C++源文件从文本到可执行文件经历的过程</h1><p>对于C++源文件，从文本到可执行文件一般需要四个过程：</p><p>1、预处理阶段：对源代码文件中文件包含关系（头文件）、预编译语句（宏定义）进行分析和替换，生成预编译文件;</p><p>2、编译阶段：将经过预处理后的预编译文件转换成特定汇编代码，生成汇编文件;</p><p>3、汇编阶段：将编译阶段生成的汇编文件转化成机器码，生成可重定位目标文件;</p><p>4、链接阶段：将多个目标文件及所需要的库连接成最终的可执行目标文件;</p><h1 id="18-include头文件的顺序以及双引号””和尖括号-lt-gt-的区别"><a href="#18-include头文件的顺序以及双引号””和尖括号-lt-gt-的区别" class="headerlink" title="18. include头文件的顺序以及双引号””和尖括号&lt;&gt;的区别"></a>18. include头文件的顺序以及双引号””和尖括号&lt;&gt;的区别</h1><p>双引号和尖括号的区别：编译器预处理阶段查找头文件的路径不一样；</p><p>对于使用<strong>双引号””</strong>包含的头文件，查找头文件路径先从当前头文件目录开始，若没找到再从编译器设置的头文件路径开始查找；</p><p>而使用<strong>尖括号&lt;&gt;</strong>包含头文件，查找头文件路径直接从编译器设置的开始</p><h1 id="19-malloc的原理"><a href="#19-malloc的原理" class="headerlink" title="19. malloc的原理"></a>19. malloc的原理</h1><p>Malloc函数用于动态分配内存。为了减少内存碎片和系统调用的开销，malloc其采用内存池的方式，先申请大块内存作为堆区，然后将堆区分为多个内存块，以块作为内存管理的基本单位；当用户申请内存时，直接从堆区分配一块合适的空闲块；</p><p>Malloc采用隐式链表结构将堆区分成连续的、大小不一的块，包含已分配块和未分配块；同时malloc采用显示链表结构来管理所有的空闲块，即使用一个双向链表将空闲块连接起来，每一个空闲块记录了一个连续的、未分配的地址；</p><p>当进行内存分配时，Malloc会通过隐式链表遍历所有的空闲块，选择满足要求的块进行分配；当进行内存合并时，malloc采用边界标记法，根据每个块的前后块是否已经分配来决定是否进行块合并；</p><p>Malloc在申请内存时，一般会通过brk或者mmap系统调用进行申请；其中当申请内存小于128K时，会使用系统函数brk在堆区中分配；而当申请内存大于128K时，会使用系统函数mmap ( mmap将一个文件或者其它对象映射进内存 ) 在映射区分配；</p><h1 id="20-C-的内存管理是怎样的"><a href="#20-C-的内存管理是怎样的" class="headerlink" title="20. C++的内存管理是怎样的"></a>20. C++的内存管理是怎样的</h1><p>在C++中，虚拟内存分为代码段、数据段、BSS段、堆区、文件映射区以及栈区六部分。</p><p>1、代码段:包括只读存储区和文本区，其中只读存储区存储字符串常量，文本区存储程序的机器代码；</p><p>2、数据段：存储程序中已初始化的全局变量和静态变量；</p><p>3、BSS 段：存储未初始化的全局变量和静态变量（局部+全局），以及所有被初始化为0的全局变量和静态变量；</p><p>4、堆区：调用new/malloc函数时在堆区动态分配内存，同时需要调用delete/free来手动释放申请的内存；</p><p>5、映射区:存储动态链接库以及调用mmap函数进行的文件映射；</p><p>6、栈：使用栈空间存储函数的返回地址、参数、局部变量、返回值；</p>]]></content>
      
      
      <categories>
          
          <category> C&amp;&amp;C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C&amp;&amp;C++ </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tacoyu23的建站史</title>
      <link href="/2020/06/28/tacoyu%E7%9A%84%E5%BB%BA%E7%AB%99%E5%8F%B2/"/>
      <url>/2020/06/28/tacoyu%E7%9A%84%E5%BB%BA%E7%AB%99%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-6-27-初学Github"><a href="#2020-6-27-初学Github" class="headerlink" title="2020/6/27 初学Github"></a>2020/6/27 初学Github</h1><ol><li><p>因为在线试衣系统以及以后做项目的需要，花了将近六个小时熟悉传说中的Github；</p></li><li><p>对自己的Github进行修改，并创建 .github.io博客；</p></li></ol><h1 id="2020-6-28-博客初成"><a href="#2020-6-28-博客初成" class="headerlink" title="2020/6/28 博客初成"></a>2020/6/28 博客初成</h1><ol><li><p>在CSDN上找资料，学习使用Git命令以及Hexo；</p></li><li><p>Github上使用Hexo配置初始的next主题；</p></li><li><p>使用next第四个主题，调暗模式，把开始的两篇文章传上去；</p></li><li><p>打开并正确使用标签、分类，设置图像、链接以及打赏功能；</p></li></ol><h1 id="2020-6-29-博客基本完善"><a href="#2020-6-29-博客基本完善" class="headerlink" title="2020/6/29 博客基本完善"></a>2020/6/29 博客基本完善</h1><ol><li><p>增加了一些新功能，比如动态背景、加入fork Github图标(虽然这个基本用不着，哈哈)；</p></li><li><p>增加了评论啊、统计等功能，不过还是有两个没配置成功，新版和旧版的区别还是挺大的，网上大多是旧版的教程；</p></li></ol><p>这个熟能生巧，慢慢摸索着前进吧！</p>]]></content>
      
      
      <categories>
          
          <category> Privacy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建Next进行美化详解</title>
      <link href="/2020/06/28/Hexo%E6%90%AD%E5%BB%BANext%E8%BF%9B%E8%A1%8C%E7%BE%8E%E5%8C%96%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/06/28/Hexo%E6%90%AD%E5%BB%BANext%E8%BF%9B%E8%A1%8C%E7%BE%8E%E5%8C%96%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p> 前提是已经安装Node.js 、Git 和Hexo以及注册Github账户；</p><p>安装流程可见：<a href="https://blog.csdn.net/qq_36759224/article/details/82121420" target="_blank" rel="noopener">使用 Github Pages 和 Hexo 搭建自己的独立博客【超级详细的小白教程】</a></p><h1 id="1、Next主题的启用"><a href="#1、Next主题的启用" class="headerlink" title="1、Next主题的启用"></a>1、Next主题的启用</h1><p>在Hexo下面的themes中，右键 选择Git base here</p><p>复制这行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure><p>等待完成后，打开Hexo的这个文件</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628135626463.png" alt="image-20200628135626463"></p><p>找到 theme</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628135105789.png" alt="image-20200628135105789"></p><p>把 theme 后面的 landscape 改成 next 即可；</p><p>然后在Hexo文件夹中 右键 Git base here</p><p>输入以下命令，启动本地预览</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628135424948.png" alt="image-20200628135424948"></p><p>出现下面两个INFO表示成功，在浏览器中进入<a href="http://localhost:4000进行查看；">http://localhost:4000进行查看；</a></p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628135511979.png" alt="image-20200628135511979"></p><p>查看后需要关闭的话 则要在命令行输入Ctrl + c 结束；</p><p>这样 next主题就启动成功了；</p><h1 id="2、更改Next主题为中文"><a href="#2、更改Next主题为中文" class="headerlink" title="2、更改Next主题为中文"></a>2、更改Next主题为中文</h1><p>同样打开Hexo的_config.yml文件，这是配置文件</p><p>找到Site 下的 language ，改成zh-CN即可</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628135739023.png" alt="image-20200628135739023"></p><p>然后在命令行可开启本地预览查看；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628135927788.png" alt="image-20200628135927788"></p><h1 id="3、添加标签页和分类页"><a href="#3、添加标签页和分类页" class="headerlink" title="3、添加标签页和分类页"></a>3、添加标签页和分类页</h1><p>打开文件</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628140039796.png" alt="image-20200628140039796"></p><p>找到meau 然后把tags 和 categories前面的#号去掉，然后保存</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628140120038.png" alt="image-20200628140120038"></p><p>然后本地预览 可发现</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628140232539.png" alt="image-20200628140232539"></p><p>但是点进去后不会显示，因为你没有创建标签页和分类页</p><h1 id="4、正确打开标签页和分类页"><a href="#4、正确打开标签页和分类页" class="headerlink" title="4、正确打开标签页和分类页"></a>4、正确打开标签页和分类页</h1><p>进入文件夹</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628140429336.png" alt="image-20200628140429336"></p><p>启动git命令行</p><p>输入命令： hexo n page tags</p><p>就会在source中创建tags文件夹，并在里面创建index.md文件，表示已经可以使用；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628140636484.png" alt="image-20200628140636484"></p><p>然后打开index.md 进行修改</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628140719419.png" alt="image-20200628140719419"></p><p>注意冒号后面必须有一个空格；</p><p>对于分类页同理，hexo n page categories 然后修改的时候type: “categories”；</p><h1 id="5、主题样式的更改"><a href="#5、主题样式的更改" class="headerlink" title="5、主题样式的更改"></a>5、主题样式的更改</h1><p>在next的主题配置文件里面 找到Schemes ，发现有四种主题：</p><p>要用哪个就把哪个前面的#去掉，其它的三个加上# (#代表注释)；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628141115598.png" alt="image-20200628141115598"></p><p>Muse：</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628141204775.png" alt="image-20200628141204775"></p><p>Mist：</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628141238974.png" alt="image-20200628141238974"></p><p>pisces：</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628141307437.png" alt="image-20200628141307437"></p><p>Gemini：</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628141335864.png" alt="image-20200628141335864"></p><p>改完保存，本地预览即可；</p><h1 id="6、更改图像"><a href="#6、更改图像" class="headerlink" title="6、更改图像"></a>6、更改图像</h1><p>在next配置文件中，找到</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628141530909.png" alt="image-20200628141530909"></p><p>默认就是这个样子</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628141647247.png" alt="image-20200628141647247"></p><p>更改的话只需改url后面的网站，网站的内容就是你将用的图像；</p><h1 id="7、更改标题、作者和链接"><a href="#7、更改标题、作者和链接" class="headerlink" title="7、更改标题、作者和链接"></a>7、更改标题、作者和链接</h1><p>在Hexo的配置文件下，找到</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628141842513.png" alt="image-20200628141842513"></p><p>然后对这些进行修改 保存即可；</p><h1 id="8、启动侧边栏社交链接"><a href="#8、启动侧边栏社交链接" class="headerlink" title="8、启动侧边栏社交链接"></a>8、启动侧边栏社交链接</h1><p>打开next的配置文件中，找到social links</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628142003322.png" alt="image-20200628142003322"></p><p>对后面的链接进行修改 然后去掉# 即可显示；</p><p>注意 #号是注释作用，只有去掉#号才能生效；</p><h1 id="9、启用友情链接"><a href="#9、启用友情链接" class="headerlink" title="9、启用友情链接"></a>9、启用友情链接</h1><p>在next的配置文件中 找到</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628171948200.png" alt="image-20200628171948200"></p><p><strong>links：</strong></p><p><strong>名称: url</strong></p><p>显示出来是这样：</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628172019856.png" alt=""></p><p>上面那个title：Links也是可以改的，比如我改成友情链接，显示是这样：</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628172147758.png" alt="image-20200628172147758"></p><h1 id="10、新建一篇文章"><a href="#10、新建一篇文章" class="headerlink" title="10、新建一篇文章"></a>10、新建一篇文章</h1><p>Hexo文件中打开命令行；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：hexo n 文件名</span><br><span class="line"><span class="comment">//在Hexo\source\_posts下建立对应.md形式的文件</span></span><br></pre></td></tr></table></figure><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628172458284.png" alt="image-20200628172458284"></p><p>进入本地预览；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628173013617.png" alt="image-20200628173013617"></p><h1 id="11、markdown基本使用"><a href="#11、markdown基本使用" class="headerlink" title="11、markdown基本使用"></a>11、markdown基本使用</h1><p>创建一个测试文档</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628213826125.png" alt="image-20200628213826125"></p><p>输入— 然后回车，头部格式就出来了，接着输入该文档的title、tag、categories、description等待；就是下面这样：</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628214022639.png" alt="image-20200628214022639"></p><h2 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h2><p> [ 链接标题 ]（链接url）</p><h2 id="插入图片-文件"><a href="#插入图片-文件" class="headerlink" title="插入图片/文件"></a>插入图片/文件</h2><p> ！[ 文件标题 ]（文件/图片url）</p><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><p>两个*号中间的内容是斜体</p><p><em>字体是斜的</em></p><h2 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h2><p>两个**号之间的是粗体</p><p><strong>字体是粗的</strong></p><h2 id="插入代码块"><a href="#插入代码块" class="headerlink" title="插入代码块"></a>插入代码块</h2><p>单行：<code>//单行代码</code></p><p>代码块：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码块x</span></span><br><span class="line"><span class="comment">// xx</span></span><br><span class="line"><span class="comment">// xx</span></span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>输入一个&gt; 随后输入的内容就是引用；</p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>连续三个 - 或者 三个 *，然后回车</p><hr><h1 id="12、开启打赏功能"><a href="#12、开启打赏功能" class="headerlink" title="12、开启打赏功能"></a>12、开启打赏功能</h1><p>next里面的配置文件中，找到Reward</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628215929193.png" alt="image-20200628215929193"></p><p>然后enable 和 animation 设置为true</p><p>并添加个人的微信收款码和支付宝收款码；</p><p>放到 next/source/images 中；</p><h1 id="13、开启订阅公众号"><a href="#13、开启订阅公众号" class="headerlink" title="13、开启订阅公众号"></a>13、开启订阅公众号</h1><p>在next的配置文件中找到subscribe</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628224305802.png" alt="image-20200628224305802"></p><p>可通过以下四个方式订阅，也可添加；</p><h1 id="14、设置头像为圆形可旋转"><a href="#14、设置头像为圆形可旋转" class="headerlink" title="14、设置头像为圆形可旋转"></a>14、设置头像为圆形可旋转</h1><p>需要对这个文件进行修改；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628224655531.png" alt="image-20200628224655531"></p><p>按下图修改</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200629113603426.png" alt="image-20200629113603426"></p><p>然后直接打开next的配置文件，找到avatar</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628230323716.png" alt="image-20200628230323716"></p><p>把rounded和rotated设置为true；</p><p>rounded是说要不要把图像设置为圆形；</p><p>rotated是说要不要让它转，如果要修改转的一些详细信息，就要到之前说的那个siderbar-author那个文件去修改；</p><h1 id="15、首页文章设置阅读全文"><a href="#15、首页文章设置阅读全文" class="headerlink" title="15、首页文章设置阅读全文"></a>15、首页文章设置阅读全文</h1><p>next的配置文件下，找到这里</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628230736955.png" alt="image-20200628230736955"></p><p>把这两个都设置为true，默认应该是true；</p><p>然后有两种方法：</p><p><strong>法1：</strong></p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628231016093.png" alt="image-20200628231016093"></p><p>在博客的头部 添加description，然后在后面输入你的描述，那么在你的博客中，这篇文章就只会显示你写的描述，剩下的由阅读全文这个按钮代替；</p><p><strong>法2：</strong></p><p>在文章中输入这一行代码，那么默认这行代码之前的部分为描述，之后的部分在阅读全文中显示；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628231353466.png" alt="image-20200628231353466"></p><h1 id="16、添加动态背景"><a href="#16、添加动态背景" class="headerlink" title="16、添加动态背景"></a>16、添加动态背景</h1><p>今天在学习使用Hexo修改next的背景时，发现：<br><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/20200628235024881.png" alt="在这里插入图片描述"></p><p>这几个东西我无论设置哪些个为true，都调不出动态背景；<br>随后开始在网上搜，发现大多都是针对老版本的NexT调动态背景或者canvas_nest的解决方法，不过也受到一些启发，这里就用新版本的演示一下：</p><p>1、首先看这里<br><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/2020062823574295.png" alt="在这里插入图片描述"><br><code>Dependencies: https://github.com/theme-next/theme-next-three</code><br>表示这三个动态背景依赖于git克隆(clone)才能使用；</p><p>2、然后在next文件下打开Git命令行界面，准备clone<br>输入命令后，等待下载；<br><img src="https://img-blog.csdnimg.cn/20200629000126891.png" alt="在这里插入图片描述"><br>下载后就会有一个这样的文件出现在next文件夹中<br><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/20200629000231668.png" alt="在这里插入图片描述"></p><p>只需要将此文件重命名为three，然后剪贴到next/source/lib文件下下面即可；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/20200629000324285.png" alt="在这里插入图片描述"></p><p>3、依赖包已经克隆了，之后就只用改之前那几个参数就能调选择你喜欢的动态背景了；<br><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/20200629000538313.png" alt="在这里插入图片描述"><br>调完后，hexo s 本地预览下；</p><p>如果你对canva_nest有着独特的喜爱，那就clone它的依赖包放入next/source/lib中，然后千万记得，在next的_config.yml文件中加上这样两句话：<br><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/20200629000755298.png" alt="在这里插入图片描述"></p><p>​        想打开时，把enable置为true即可，这个与上面动态背景总开关没联系！等于说你可以上面设为false，canvas_nest设置为true，它一样可以用这个动态背景！</p><h1 id="17、给博客添加fork-Github"><a href="#17、给博客添加fork-Github" class="headerlink" title="17、给博客添加fork Github"></a>17、给博客添加fork Github</h1><p>进入这个网站<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">GitHub Corners</a></p><p>选一个心仪的图标，然后复制它旁边框框里的内容；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200629002050858.png" alt="image-20200629002050858"></p><p>打开文件</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200629002131129.png" alt="image-20200629002131129"></p><p>搜索headband，在它下面插入这段复制的内容；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200629002201440.png" alt="image-20200629002201440"></p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200629002321850.png" alt="image-20200629002321850"></p><p>然后把 href 那里的网址改成自己github的地址！！！</p><p>保存，再本地预览即可看见；</p><h1 id="18、修改文章内链接样式"><a href="#18、修改文章内链接样式" class="headerlink" title="18、修改文章内链接样式"></a>18、修改文章内链接样式</h1><p>打开next内部的这个文件：</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200629002546357.png" alt="image-20200629002546357"></p><p>在此文件的最后面加上代码块：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#345</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  &amp;:hover&#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-tag">white</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200629003117190.png" alt="image-20200629003117190"></p><h1 id="19、怎样修改文章底部-标签式样-未完成"><a href="#19、怎样修改文章底部-标签式样-未完成" class="headerlink" title="19、怎样修改文章底部#标签式样(未完成)"></a>19、怎样修改文章底部#标签式样(未完成)</h1><p>打开这个文件：</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200629003249240.png" alt="image-20200629003249240"></p><p>找到这个位置</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200629003405007.png" alt="image-20200629003405007"></p><p>在 rel=”tag”&gt; 后插入<i class="fa fa-google"></i></p><p>图标可以在<a href="https://fontawesome.dashgame.com/" target="_blank" rel="noopener">Font awesome</a>中找自己喜欢的，替换就行；</p><h1 id="20、增加Valine评论功能"><a href="#20、增加Valine评论功能" class="headerlink" title="20、增加Valine评论功能"></a>20、增加Valine评论功能</h1><p>注册LeanCloud网站</p><p>实名认证</p><p>验证邮箱</p><p>然后创建应用，进入应用设置</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200629010133054.png" alt="image-20200629010133054"></p><p>进入之后，复制应用Keys下的AppID和Appkey；</p><p>在next的配置文件中找到如图valine位置</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200629010337501.png" alt="image-20200629010337501"></p><p>更改为</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200629010532354.png" alt="image-20200629010532354"></p><p>将自己的appid和appkey复制过去；</p><p>保存；</p><h1 id="21、增加搜索功能"><a href="#21、增加搜索功能" class="headerlink" title="21、增加搜索功能"></a>21、增加搜索功能</h1><p>next的配置文件中，置local_search为true</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200629011131547.png" alt="image-20200629011131547"></p><h1 id="22、增加不蒜子统计功能"><a href="#22、增加不蒜子统计功能" class="headerlink" title="22、增加不蒜子统计功能"></a>22、增加不蒜子统计功能</h1><p>next的配置文件中找到这个并置为true；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200629011914774.png" alt="image-20200629011914774"></p><h1 id="23、内容分享服务（未完成）"><a href="#23、内容分享服务（未完成）" class="headerlink" title="23、内容分享服务（未完成）"></a>23、内容分享服务（未完成）</h1><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200629012648472.png" alt="image-20200629012648472"></p><h1 id="24、增加加载效果"><a href="#24、增加加载效果" class="headerlink" title="24、增加加载效果"></a>24、增加加载效果</h1><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200629013406859.png" alt="image-20200629013406859"></p><p>置为true；</p><p>然后在next下，打开git命令行，输入</p><p><code>git clone https://github.com/theme-next/theme-next-pace</code></p><p>等待依赖包下载成功即可；</p><h1 id="25、增加点击爆炸效果-未完成"><a href="#25、增加点击爆炸效果-未完成" class="headerlink" title="25、增加点击爆炸效果(未完成)"></a>25、增加点击爆炸效果(未完成)</h1><h1 id="26、隐藏底部-强力驱动"><a href="#26、隐藏底部-强力驱动" class="headerlink" title="26、隐藏底部 强力驱动"></a>26、隐藏底部 强力驱动</h1><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200629014215836.png" alt="image-20200629014215836"></p><p>置为false就行；</p><h1 id="27、增加字数统计和阅读时长功能-未完成"><a href="#27、增加字数统计和阅读时长功能-未完成" class="headerlink" title="27、增加字数统计和阅读时长功能(未完成)"></a>27、增加字数统计和阅读时长功能(未完成)</h1><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200629015538934.png" alt="image-20200629015538934"></p><p>clone了包，开了true，不知道为啥还是不行；</p>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github的介绍与使用</title>
      <link href="/2020/06/28/Github%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/06/28/Github%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h1><h2 id="1-1-目的"><a href="#1-1-目的" class="headerlink" title="1.1 目的"></a>1.1 目的</h2><p>借助github托管项目代码</p><p>GitHub是全球最大的社交编程及代码托管网站；</p><p>可以托管各种git库，并提供一个web界面；</p><h2 id="1-2-基本概念"><a href="#1-2-基本概念" class="headerlink" title="1.2 基本概念"></a>1.2 基本概念</h2><h3 id="仓库-Repository"><a href="#仓库-Repository" class="headerlink" title="仓库(Repository)"></a>仓库(Repository)</h3><p>仓库即你的项目，在github上开源一个项目，就必须新建一个Repository；</p><h3 id="收藏-Star"><a href="#收藏-Star" class="headerlink" title="收藏(Star)"></a>收藏(Star)</h3><p>仓库主页star按钮，意思为收藏该项目的人数，一个项目有100个star都算很不容易了；</p><h3 id="复制项目-Fork"><a href="#复制项目-Fork" class="headerlink" title="复制项目(Fork)"></a>复制项目(Fork)</h3><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627155415847.png" alt="image-20200627155415847"></p><p>建立一份和别人一模一样的仓库，独立存在；</p><h3 id="发起请求-Pull-Request"><a href="#发起请求-Pull-Request" class="headerlink" title="发起请求(Pull Request)"></a>发起请求(Pull Request)</h3><p>若李四在这个仓库里进行修改，随后李四可以在自己仓库中点击 Pull Request 来请求张三合并仓库(待张三查看后确认合并后才执行)；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627221151261.png" alt="image-20200627221151261"></p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627221306643.png" alt="image-20200627221306643"></p><h3 id="关注-Watch"><a href="#关注-Watch" class="headerlink" title="关注(Watch)"></a>关注(Watch)</h3><p>关注某人或者某个项目，一旦项目有任何更新，则会收到提醒；</p><h3 id="事务卡片-Issue"><a href="#事务卡片-Issue" class="headerlink" title="事务卡片(Issue)"></a>事务卡片(Issue)</h3><p>发现代码BUG，但是目前没有成型代码，需要讨论时使用；</p><h2 id="1-3-注册"><a href="#1-3-注册" class="headerlink" title="1.3 注册"></a>1.3 注册</h2><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627161200282.png" alt="image-20200627161200282"></p><p>现在不管是私有还是公开都是免费的了！！！</p><h2 id="1-4-Notice"><a href="#1-4-Notice" class="headerlink" title="1.4 Notice"></a>1.4 Notice</h2><p>1、因为 github 在国外服务器，所以访问速度较慢或者无法访问，需要翻墙(软件: Shadowsocks)；</p><p>2、私有仓库只能自己和指定的朋友才有权限操作；</p><h1 id="二、仓库Repository"><a href="#二、仓库Repository" class="headerlink" title="二、仓库Repository"></a>二、仓库Repository</h1><h2 id="2-1-创建仓库"><a href="#2-1-创建仓库" class="headerlink" title="2.1 创建仓库"></a>2.1 创建仓库</h2><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627162248702.png" alt="image-20200627162248702"></p><h2 id="2-2-仓库介绍"><a href="#2-2-仓库介绍" class="headerlink" title="2.2 仓库介绍"></a>2.2 仓库介绍</h2><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627162554906.png" alt="image-20200627162554906"></p><h2 id="2-3-仓库管理"><a href="#2-3-仓库管理" class="headerlink" title="2.3 仓库管理"></a>2.3 仓库管理</h2><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627162910388.png" alt="image-20200627162910388"></p><h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627163719052.png" alt="image-20200627163719052"></p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627163823270.png" alt="image-20200627163823270"></p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627163918556.png" alt="image-20200627163918556"></p><p>+号代表新增的，-号代表删除的；</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627164155433.png" alt="image-20200627164155433"></p><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627164545199.png" alt="image-20200627164545199"></p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627164450614.png" alt="image-20200627164450614"></p><h3 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h3><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627164624740.png" alt="image-20200627164624740"></p><p>或者快捷键T</p><h3 id="下载-检出项目"><a href="#下载-检出项目" class="headerlink" title="下载/检出项目"></a>下载/检出项目</h3><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627164709157.png" alt="image-20200627164709157"></p><h2 id="2-4-github-Issues"><a href="#2-4-github-Issues" class="headerlink" title="2.4 github Issues"></a>2.4 github Issues</h2><p>出现问题时，讨论使用；</p><p>A在看B的仓库时，发现其中存在的问题，然后新建一个Issue，然后B的主页就会显示此Issue；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627170413159.png" alt="image-20200627170413159"></p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627170754016.png" alt="image-20200627170754016"></p><p>先谢谢 有问题就提  然后觉得没问题了就可以close 双方都可以close；</p><h2 id="2-5-开源项目贡献流程"><a href="#2-5-开源项目贡献流程" class="headerlink" title="2.5 开源项目贡献流程"></a>2.5 开源项目贡献流程</h2><p>1、新建Issue </p><p>提交使用问题或者建议、想法；</p><p>2、Pull Request</p><p>1）fork项目；</p><p>2）修改自己仓库的项目代码；</p><p>3）新建 pull Request；</p><p>4）等待作者操作审核，合并；</p><h1 id="三、Git安装和使用"><a href="#三、Git安装和使用" class="headerlink" title="三、Git安装和使用"></a>三、Git安装和使用</h1><h2 id="3-1-目的"><a href="#3-1-目的" class="headerlink" title="3.1 目的"></a>3.1 目的</h2><p>通过 git 管理 github 托管项目代码</p><h2 id="3-2-下载安装"><a href="#3-2-下载安装" class="headerlink" title="3.2 下载安装"></a>3.2 下载安装</h2><p><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">官网下载请点击</a></p><p>不过官网下载太慢了，给出一个<a href="https://pan.baidu.com/s/1eJOvztS5I5_Dm8xVoatZ-w" target="_blank" rel="noopener">网盘链接, 提取码：oiiy </a></p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627223603075.png" alt="image-20200627223603075"></p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627224113788.png" alt="image-20200627224113788"></p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627224437738.png" alt="image-20200627224437738"></p><p>一直next；</p><p>鼠标右击桌面出现两个Git 即为安装成功；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627224727001.png" alt="image-20200627224727001"></p><h2 id="3-3-Git基础设置"><a href="#3-3-Git基础设置" class="headerlink" title="3.3 Git基础设置"></a>3.3 Git基础设置</h2><h3 id="1、设置用户名"><a href="#1、设置用户名" class="headerlink" title="1、设置用户名"></a>1、设置用户名</h3><p>git config –global user.name ‘用户名’</p><h3 id="2、设置用户名邮箱"><a href="#2、设置用户名邮箱" class="headerlink" title="2、设置用户名邮箱"></a>2、设置用户名邮箱</h3><p>git config –global user.email ‘xxxxxx.com ‘</p><p><strong>初始化一次就不用初始化了！！！</strong></p><h2 id="3-4-初始化Git仓库"><a href="#3-4-初始化Git仓库" class="headerlink" title="3.4 初始化Git仓库"></a>3.4 初始化Git仓库</h2><h3 id="1、创建文件夹"><a href="#1、创建文件夹" class="headerlink" title="1、创建文件夹"></a>1、创建文件夹</h3><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627230513181.png" alt="image-20200627230513181"></p><h3 id="2、在文件内初始化git（创建git仓库）"><a href="#2、在文件内初始化git（创建git仓库）" class="headerlink" title="2、在文件内初始化git（创建git仓库）"></a>2、在文件内初始化git（创建git仓库）</h3><p>选择目录命令：<strong>cd test</strong> </p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627230614337.png" alt="image-20200627230614337"></p><p>初始化：<strong>git init</strong></p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627230732081.png" alt="image-20200627230732081"></p><p>创建了一个隐藏的文件</p><h2 id="3-5-工作区域"><a href="#3-5-工作区域" class="headerlink" title="3.5 工作区域"></a>3.5 工作区域</h2><h3 id="工作区-working-Directory"><a href="#工作区-working-Directory" class="headerlink" title="工作区 working Directory"></a>工作区 working Directory</h3><p>添加、编辑、修改文件等动作</p><h3 id="仓库-Git-Repository-Git"><a href="#仓库-Git-Repository-Git" class="headerlink" title="仓库 Git Repository Git"></a>仓库 Git Repository Git</h3><p>最终确定的文件保存到仓库，成为一个新的版本，并对他人可见；</p><h3 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h3><p>暂存已经修改的文件，最后统一提交到git仓库；</p><h2 id="3-6-常见命令"><a href="#3-6-常见命令" class="headerlink" title="3.6 常见命令"></a>3.6 常见命令</h2><h3 id="cd-文件夹"><a href="#cd-文件夹" class="headerlink" title="cd 文件夹"></a>cd 文件夹</h3><p>进入当前文件夹目录下</p><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p>获得仓库状态</p><h3 id="git-add-文件名"><a href="#git-add-文件名" class="headerlink" title="git add 文件名"></a>git add 文件名</h3><p>提交工作区的文件到暂存区</p><h3 id="git-commit-m-’提交描述‘"><a href="#git-commit-m-’提交描述‘" class="headerlink" title="git commit -m ’提交描述‘"></a>git commit -m ’提交描述‘</h3><p>提交暂存区的文件到git仓库</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627225618696.png" alt="image-20200627225618696"></p><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>显示文件清单</p><h3 id="nano-文件名"><a href="#nano-文件名" class="headerlink" title="nano  文件名"></a>nano  文件名</h3><p>对该文件内容进行修改；</p><h3 id="rm-rf-文件名"><a href="#rm-rf-文件名" class="headerlink" title="rm -rf 文件名"></a>rm -rf 文件名</h3><p>删除该文件</p><h3 id="git-put"><a href="#git-put" class="headerlink" title="git put"></a>git put</h3><p>提交本地仓库到git云仓库</p><h2 id="3-7-常用操作"><a href="#3-7-常用操作" class="headerlink" title="3.7 常用操作"></a>3.7 常用操作</h2><h3 id="1、向仓库提交文件"><a href="#1、向仓库提交文件" class="headerlink" title="1、向仓库提交文件"></a>1、向仓库提交文件</h3><p>1）创建文件</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627231131274.png" alt="image-20200627231131274"></p><p>2）添加到暂存区</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627231557881.png" alt="image-20200627231557881"></p><p>3）将文件从暂存区提交到仓库</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627231850224.png" alt="image-20200627231850224"></p><h3 id="2、修改仓库文件"><a href="#2、修改仓库文件" class="headerlink" title="2、修改仓库文件"></a>2、修改仓库文件</h3><p>1）修改文件</p><p>notice： vi修改文件不太好用，建议nano修改；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627232951574.png" alt="image-20200627232951574"></p><p>2）添加到暂存区</p><p>​    <img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627233110398.png" alt="image-20200627233110398"></p><p>3）提交到git仓库</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627233129905.png" alt="image-20200627233129905"></p><h3 id="3、删除仓库文件"><a href="#3、删除仓库文件" class="headerlink" title="3、删除仓库文件"></a>3、删除仓库文件</h3><p>1）直接删除文件</p><p>rm -rf al.php</p><p>2）提交到暂存区</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627233314846.png" alt="image-20200627233314846"></p><p>3）提交到仓库</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627233350598.png" alt="image-20200627233350598"></p><h1 id="四、-Git远程管理仓库"><a href="#四、-Git远程管理仓库" class="headerlink" title="四、 Git远程管理仓库"></a>四、 Git远程管理仓库</h1><h2 id="4-1-目的"><a href="#4-1-目的" class="headerlink" title="4.1 目的"></a>4.1 目的</h2><p>作用：备份，实现代码共享集中化管理；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627233647349.png" alt="image-20200627233647349"></p><h2 id="4-2-将本地仓库同步到git远程仓库"><a href="#4-2-将本地仓库同步到git远程仓库" class="headerlink" title="4.2 将本地仓库同步到git远程仓库"></a>4.2 将本地仓库同步到git远程仓库</h2><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627233743371.png" alt="image-20200627233743371"></p><h3 id="1、先fork到本地"><a href="#1、先fork到本地" class="headerlink" title="1、先fork到本地"></a>1、先fork到本地</h3><p>目的：将远程仓库（GitHub对应项目）复制到本地</p><p>代码：git clone 仓库地址</p><p>仓库地址怎么来：</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627234035899.png" alt="image-20200627234035899"></p><p>成功复制到本地后：</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627234259748.png" alt="image-20200627234259748"></p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627234320027.png" alt="image-20200627234320027"></p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627234354436.png" alt="image-20200627234354436"></p><p>与GitHub上的一致；</p><h3 id="2、建立-文件，然后-提交到本地仓库后"><a href="#2、建立-文件，然后-提交到本地仓库后" class="headerlink" title="2、建立 文件，然后 提交到本地仓库后"></a>2、建立 文件，然后 提交到本地仓库后</h3><p>完成后提示以下内容：</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627235216781.png" alt="image-20200627235216781"></p><h3 id="3、键入-git-push-完成云同步"><a href="#3、键入-git-push-完成云同步" class="headerlink" title="3、键入 git push 完成云同步"></a>3、键入 git push 完成云同步</h3><p>会提示登陆 github 完成操作；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627235342219.png" alt="image-20200627235342219"></p><p>登陆后依旧会要你 输入用户名和密码</p><p>全部输入后 会出现以下界面：</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627235539000.png" alt="image-20200627235539000"></p><p>同时查看git仓库 发现已经提交上了</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627235552520.png" alt="image-20200627235552520"></p><h2 id="4-3-解决git-push错误"><a href="#4-3-解决git-push错误" class="headerlink" title="4.3 解决git push错误"></a>4.3 解决git push错误</h2><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200627235750676.png" alt="image-20200627235750676"></p><p>config文件通过记事本打开，按图片内容修改即可；</p><h1 id="五、Github-Pages搭建个人网站"><a href="#五、Github-Pages搭建个人网站" class="headerlink" title="五、Github Pages搭建个人网站"></a>五、Github Pages搭建个人网站</h1><h2 id="5-1-访问"><a href="#5-1-访问" class="headerlink" title="5.1 访问"></a>5.1 访问</h2><p> <strong>https://户名.github.io</strong></p><h2 id="5-2-搭建步骤"><a href="#5-2-搭建步骤" class="headerlink" title="5.2 搭建步骤"></a>5.2 搭建步骤</h2><p>1、创建个人站点 -&gt; 新建仓库 (仓库名必须是[ 用户名.github.io ] )</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628001409960.png" alt="image-20200628001409960"></p><p>2、在仓库下新建 <strong>index.html</strong> 的文件即可；</p><p>新建index.html文件，并输入内容</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628001921486.png" alt="image-20200628001921486"></p><p>随后登陆网站可查看；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628001817666.png" alt="image-20200628001817666"></p><p>Notice：</p><p>1、github pages 仅支持静态网页；</p><p>2、仓库里面只能是.html文件；</p><h2 id="5-3-Projet-Pages-项目站点"><a href="#5-3-Projet-Pages-项目站点" class="headerlink" title="5.3 Projet Pages 项目站点"></a>5.3 Projet Pages 项目站点</h2><p><strong>https://用户名.github.io/仓库名</strong></p><p>// 新版github好像没有；</p><h3 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h3><p>1）进入项目主页，点击settings；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628002631019.png" alt="image-20200628002631019"></p><p>2）在settings里面点击choose a theme，来自动生成主题；</p><p><img src="https://tacotuesdayyy.oss-cn-shenzhen.aliyuncs.com/umg/image-20200628002643524.png" alt="image-20200628002643524"></p><p>3）生成网页</p><h1 id="六、博客主题及美化"><a href="#六、博客主题及美化" class="headerlink" title="六、博客主题及美化"></a>六、博客主题及美化</h1><h2 id="6-1-博客主题fork及使用"><a href="#6-1-博客主题fork及使用" class="headerlink" title="6.1 博客主题fork及使用"></a>6.1 博客主题fork及使用</h2><p>博客主题的使用推荐阅读文章：</p><p><a href="https://blog.csdn.net/nightmare_dimple/article/details/86661502" target="_blank" rel="noopener"> Hexo博客优化之Next主题美化</a></p><p><a href="https://blog.csdn.net/qq_36759224/article/details/82121420" target="_blank" rel="noopener">使用 Github Pages 和 Hexo 搭建自己的独立博客【超级详细的小白教程】</a></p><h2 id="6-2-博客主题美化"><a href="#6-2-博客主题美化" class="headerlink" title="6.2 博客主题美化"></a>6.2 博客主题美化</h2><p>博客美化推荐阅读文章：</p><p>这篇文章的有些修改适用，有些不适用<a href="https://blog.csdn.net/weixin_39345384/article/details/80785373?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.nonecase" target="_blank" rel="noopener">Hexo框架下用NexT(v7.0+)主题美化博客</a></p><p><a href="https://blog.csdn.net/nightmare_dimple/article/details/86661502" target="_blank" rel="noopener">使用 Github Pages 和 Hexo 搭建自己的独立博客【超级详细的小白教程】</a></p><p><a href="https://blog.csdn.net/as480133937/article/details/100138838" target="_blank" rel="noopener">Hexo-Next 主题博客个性化配置超详细，超全面(两万字)</a></p>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
